from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from states import *

import keyboards
from gpt import ChatGptServices
from util import load_prompt, load_message, send_answer

router = Router()
chat_gpt = ChatGptServices()


@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    await state.clear()

    image = FSInputFile("resources/images/main.jpg")
    message = load_message('main')

    await msg.answer_photo(photo=image, caption=message)


@router.message(Command('random'))
async def random(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    await state.clear()

    image = FSInputFile("resources/images/random.jpg")

    await msg.answer_photo(photo=image)
    message = await msg.answer('ChatGPT –¥—É–º–∞–µ—Ç...')

    prompt = load_prompt('random')

    chat_gpt.set_prompt(prompt)

    answer = await chat_gpt.add_message(msg.text)
    await message.edit_text(answer)

@router.message(Command('gpt'))
async def gpt(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å chatGPT

    """
    await state.clear()

    await state.set_state(GptState.gpt)

    image = FSInputFile("resources/images/gpt.jpg")
    prompt = load_prompt('gpt')
    message = load_message('gpt')

    chat_gpt.set_prompt(prompt)
    await msg.answer_photo(photo=image, caption=message, reply_markup=keyboards.inline_exit_button)



@router.callback_query(F.data == 'exit_gpt')
async def exit_gpt(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –æ–±—â–µ–Ω–∏—è —Å chatGPT
    """
    await state.clear()
    await start(callback.message, state)


@router.message(Command('talk'))
async def talk(msg: Message,  state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π
    """
    await state.clear()
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å', reply_markup=keyboards.inline_famous_person_button)



@router.callback_query(F.data.startswith('talk_'))
async def talk(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –≤ chatGPT
    """

    await state.set_state(GptState.talk)

    prompt = load_prompt(callback.data)
    image = FSInputFile(f"resources/images/{callback.data}.jpg")

    chat_gpt.set_prompt(prompt)
    person = {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana üé∏',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –°–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ üëë',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü" üìñ',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ - –§–∏–ª–æ—Å–æ—Ñ üß†',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥ - –§–∏–∑–∏–∫ üî¨',
    }

    message = person[callback.data]
    GptState.person = message[:message.find("-")-1]
    await callback.message.answer_photo(photo=image, caption=message, reply_markup=keyboards.inline_exit_button)


@router.message(Command('quiz'))
async def quiz(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å chatGPT
    """
    await state.clear()
    await state.set_state(GptState.question)
    prompt = load_prompt('quiz')
    image = FSInputFile(f"resources/images/quiz.jpg")
    message = load_message('quiz')

    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption=message, reply_markup=keyboards.reply_quiz_button)


@router.message(GptState.question)
async def quiz(msg: Message, state: FSMContext):
    theme = {
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ python': 'quiz_prog',
        '—Ç–µ–æ—Ä–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–µ–æ—Ä–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞': 'quiz_math',
        '–±–∏–æ–ª–æ–≥–∏—è': 'quiz_biology',
        '–≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç—É –∂–µ —Ç–µ–º—É': 'quiz_more',
    }
    if msg.text in theme:
        message = await msg.answer('ChatGPT –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å...')
        answer = await chat_gpt.add_message(theme[msg.text])
        await state.clear()
        await state.set_state(GptState.result)
        await message.edit_text(answer, reply_markup=keyboards.inline_exit_button)
    else:
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É'
        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)

@router.message(Command('translator'))
async def translator(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translator –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Å chatGPT
    """
    await state.clear()
    await state.set_state(GptState.translator)
    prompt = load_prompt('translator')
    image = FSInputFile(f"resources/images/translator.jpg")
    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption="–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å")


@router.message(Command('idea'))
async def idea(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /idea –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π —Å chatGPT
    """
    await state.clear()
    await state.set_state(GptState.idea)
    prompt = load_prompt('idea')
    image = FSInputFile(f"resources/images/idea.jpg")

    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π')


@router.message(StateFilter(GptState.gpt, GptState.talk, GptState.result, GptState.translator, GptState.idea))
async def gpt_answer(msg: Message, state: FSMContext):
    cur_state = await state.get_state()

    match cur_state:
        case GptState.gpt | GptState.translator | GptState.idea:
            message = await msg.answer('ChatGPT –¥—É–º–∞–µ—Ç...')
            await send_answer(msg, message, chat_gpt)
        case GptState.talk:
            message = await msg.answer(f'{GptState.person} –æ—Ç–≤–µ—á–∞–µ—Ç...')
            await send_answer(msg, message, chat_gpt)
        case GptState.result:
            message = await msg.answer('ChatGPT –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç...')
            await state.clear()
            await state.set_state(GptState.question)
            await send_answer(msg, message, chat_gpt)





@router.message()
async def echo(msg: Message):
    """
    –≠—Ö–æ
    """
    await msg.answer(msg.text)
