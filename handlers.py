
from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


import keyboards
from gpt import ChatGptServices
from util import load_prompt, load_message

router = Router()
chat_gpt = ChatGptServices()

#–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class GptState(StatesGroup):
    active = State()


class TalkState(StatesGroup):
    active = State()


class QuizState(StatesGroup):
    active = State()


class TranslatorState(StatesGroup):
    active = State()

class IdeaState(StatesGroup):
    active = State()


@router.message(CommandStart())
async def start(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    image = FSInputFile("resources/images/main.jpg")
    message = load_message('main')
    await msg.answer_photo(photo=image, caption=message)



@router.message(Command('random'))
async def random(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    image = FSInputFile("resources/images/random.jpg")

    await msg.answer_photo(photo=image)
    message = await msg.answer('—á–∞—Ç gpt –¥—É–º–∞–µ—Ç...')

    prompt = load_prompt('random')
    answer = await chat_gpt.send_question(prompt, '')
    await message.edit_text(answer)



@router.message(Command('gpt'))
async def gpt(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å chatGPT
    """
    await state.set_state(GptState.active)

    image = FSInputFile("resources/images/gpt.jpg")
    prompt = load_prompt('gpt')
    message = load_message('gpt')

    chat_gpt.set_prompt(prompt)
    await msg.answer_photo(photo=image, caption=message, reply_markup=keyboards.inline_exit_button)


@router.callback_query(F.data=='exit_gpt')
async def exit_gpt(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –æ–±—â–µ–Ω–∏—è —Å chatGPT
    """
    await state.clear()
    await start(callback.message)


@router.message(Command('talk'))
async def talk(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π
    """
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å', reply_markup=keyboards.inline_famous_person_button)



@router.callback_query(F.data.startswith('talk_'))
async def talk(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –≤ chatGPT
    """

    await state.set_state(TalkState.active)

    prompt = load_prompt(callback.data)
    image = FSInputFile(f"resources/images/{callback.data}.jpg")

    chat_gpt.set_prompt(prompt)
    if callback.data == 'talk_cobain':
        message = '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana üé∏'
    elif callback.data == 'talk_queen':
        message = '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –°–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ üëë'
    elif callback.data == 'talk_tolkien':
        message = '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü" üìñ'
    elif callback.data == 'talk_nietzsche':
        message = '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ - –§–∏–ª–æ—Å–æ—Ñ üß†'
    elif callback.data == 'talk_hawking':
        message = '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥ - –§–∏–∑–∏–∫ üî¨'

    await callback.message.answer_photo(photo=image, caption=message, reply_markup=keyboards.inline_exit_button)



@router.message(Command('quiz'))
async def quiz(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å chatGPT
    """
    await state.set_state(QuizState.active)
    prompt = load_prompt('quiz')
    image = FSInputFile(f"resources/images/quiz.jpg")
    message = load_message('quiz')

    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption=message, reply_markup=keyboards.inline_quiz_button)


@router.message(Command('translator'))
async def translator(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translator –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Å chatGPT
    """
    await state.set_state(TranslatorState.active)
    prompt = load_prompt('translator')
    image = FSInputFile(f"resources/images/translator.jpg")
    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                                                "(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–†—É—Å—Å–∫–∏–π)")


@router.message(Command('idea'))
async def idea(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /idea –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç –≤ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π —Å chatGPT
    """
    await state.set_state(IdeaState.active)
    prompt = load_prompt('idea')
    image = FSInputFile(f"resources/images/idea.jpg")
    chat_gpt.set_prompt(prompt)

    await msg.answer_photo(photo=image, caption='–ó–∞–¥–∞–π—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤')

@router.message()
async def text_handler(msg: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—èÃÅ–Ω–∏—é.
    """
    if await state.get_state() == GptState.active:
        answer = await chat_gpt.add_message(msg.text)
        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)

    elif await state.get_state() == TalkState.active:
        answer = await chat_gpt.add_message(msg.text)
        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)

    elif await state.get_state() == QuizState.active:
        if msg.text == '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ python':
            answer = await chat_gpt.add_message('quiz_prog')
        elif msg.text == '—Ç–µ–æ—Ä–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–µ–æ—Ä–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞':
            answer = await chat_gpt.add_message('quiz_math')
        elif msg.text == '–±–∏–æ–ª–æ–≥–∏—è':
            answer = await chat_gpt.add_message('quiz_biology')
        elif msg.text == '–≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç—É –∂–µ —Ç–µ–º—É':
            answer = await chat_gpt.add_message('quiz_more')
        else:
            answer = await chat_gpt.add_message(msg.text)

        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)

    elif await state.get_state() == TranslatorState.active:
        answer = await chat_gpt.add_message(msg.text)
        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)

    elif await state.get_state() == IdeaState.active:
        answer = await chat_gpt.add_message(msg.text)
        await msg.answer(answer, reply_markup=keyboards.inline_exit_button)
    else:
        await msg.answer(msg.text)